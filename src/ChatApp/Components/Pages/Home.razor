@page "/"
@using Azure
@using Azure.AI.OpenAI
@using Azure.Identity
@using OpenAI.Chat
@using System.ComponentModel.DataAnnotations
@inject IConfiguration config

<PageTitle>Chat</PageTitle>

@foreach (ChatMessage item in messages)
{
    switch (item)
    {
        case UserChatMessage userMessage:
            <MudGrid Spacing="8" Justify="Justify.FlexEnd">
                <MudItem xs="8">
                    <MudCard>
                        <MudCardHeader Class="user-message">
                            <CardHeaderContent>
                                    <MudIcon Style="margin-bottom: -4px" Icon="@Icons.Material.Filled.Person" Title="Favorite" />
                                <MudText Style="display: inline" Typo="Typo.h6">You</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText>@userMessage.Content[0].Text</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
            break;
            case SystemChatMessage systemMessage:
                <MudGrid Class="my-8" Spacing="8" Justify="Justify.FlexStart">
                    <MudItem xs="8">
                        <MudCard>
                            <MudCardHeader Class="system-message">
                            <CardHeaderContent>
                                <MudIcon Style="margin-bottom: -4px" Icon="@Icons.Material.Filled.Computer" Title="Favorite" />
                                    <MudText Style="display: inline" Typo="Typo.h6">AI Assistant</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudText>@systemMessage.Content[0].Text</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            break;
        default:
            break;
    }
}
@if (!String.IsNullOrEmpty(error))
{
    <MudAlert Severity="Severity.Error" Variant="MudBlazor.Variant.Filled">@error</MudAlert>
}
@if (isLoading)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudTextField @ref="chatInput" @bind-Value="model.UserMessage" Label="Enter your message" Required Variant="MudBlazor.Variant.Text"></MudTextField>
    <br />
    <MudButton Size="Size.Large" Style="my-8" ButtonType="ButtonType.Submit" Variant="MudBlazor.Variant.Filled" Color="Color.Primary" Class="ml-auto">Send</MudButton>
</EditForm>

@code {
    string endpoint = "";
    string clientID = "";
    string modelName = "";

    public List<ChatMessage> messages = new();
    public string error = "";
    private MudTextField<string> chatInput;

    public bool isLoading = false;

    AzureOpenAIClient azureClient;

    protected override Task OnInitializedAsync()
    {
        endpoint = config.GetValue<string>("AZURE_OPENAI_ENDPOINT");
        clientID = config.GetValue<string>("AZURE_CLIENT_ID");
        modelName = config.GetValue<string>("AZURE_OPENAI_CHATGPT_DEPLOYMENT");

        azureClient = new(new Uri(endpoint), new DefaultAzureCredential(new DefaultAzureCredentialOptions()
        {
            ManagedIdentityClientId = clientID
        }));

        return base.OnInitializedAsync();
    }

    private async Task OnValidSubmit(EditContext context)
    {
        isLoading = true;
        ChatClient chatClient = azureClient.GetChatClient(modelName);

        messages.Add(new UserChatMessage(model.UserMessage));
        model = new AIChatForm();

        try {
            ChatCompletion completion = await chatClient.CompleteChatAsync(messages);
            messages.Add(new SystemChatMessage(completion.Content[0].Text));
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }

        isLoading = false;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await chatInput.FocusAsync();
    }

    AIChatForm model = new AIChatForm();
    bool success;

    public class AIChatForm
    {
        [Required]
        public string UserMessage { get; set; }
    }
}

<style>
    .user-message {
        background-color: #2C830F;
        color: white;
    }

    .system-message {
        background-color: #2372CC;
        color: white;
    }
</style>